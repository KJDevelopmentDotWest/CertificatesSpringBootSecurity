package com.epam.esm.service.exception;

import java.util.Arrays;
import java.util.Objects;

public enum ExceptionCode {
    UNKNOWN_EXCEPTION(0, 500),
    ID_IS_NULL(1, 500),
    OPERATION_IS_NOT_SUPPORTED(2, 500),
    INTERNAL_DB_EXCEPTION(3, 500),

    THERE_IS_NO_GIFT_CERTIFICATE_WITH_PROVIDED_ID(100, 404),
    GIFT_CERTIFICATE_CANNOT_BE_NULL(101, 422),
    GIFT_CERTIFICATE_ID_CANNOT_BE_NULL(102, 422),
    GIFT_CERTIFICATE_ID_CANNOT_BE_NEGATIVE(103, 422),
    GIFT_CERTIFICATE_NAME_CANNOT_BE_NULL(104, 422),
    GIFT_CERTIFICATE_NAME_TOO_SHORT(105, 422),
    GIFT_CERTIFICATE_NAME_TOO_LONG(106, 422),
    GIFT_CERTIFICATE_NAME_STARTS_WITH_WHITESPACE(107, 422),
    GIFT_CERTIFICATE_NAME_ENDS_WITH_WHITESPACE(108, 422),
    GIFT_CERTIFICATE_DESCRIPTION_CANNOT_BE_NULL(109, 422),
    GIFT_CERTIFICATE_DESCRIPTION_STARTS_WITH_WHITESPACE(110, 422),
    GIFT_CERTIFICATE_DESCRIPTION_ENDS_WITH_WHITESPACE(111, 422),
    GIFT_CERTIFICATE_PRICE_CANNOT_BE_NULL(112, 422),
    GIFT_CERTIFICATE_PRICE_IS_NOT_POSITIVE_REAL_NUMBER(113, 422),
    GIFT_CERTIFICATE_DURATION_CANNOT_BE_NULL(114, 422),
    GIFT_CERTIFICATE_DURATION_IS_NEGATIVE(115, 422),
    GIFT_CERTIFICATE_CREATE_DATE_CANNOT_BE_NULL(116, 422),
    GIFT_CERTIFICATE_CREATE_DATE_CANNOT_POINT_TO_FUTURE(117, 422),
    GIFT_CERTIFICATE_LAST_UPDATE_DATE_CANNOT_BE_NULL(118, 422),
    GIFT_CERTIFICATE_LAST_UPDATE_DATE_CANNOT_POINT_TO_FUTURE(119, 422),
    GIFT_CERTIFICATE_TAG_LIST_CANNOT_BE_NULL(120, 422),

    THERE_IS_NO_TAG_WITH_PROVIDED_ID(200, 404),
    TAG_CANNOT_BE_NULL(201, 422),
    TAG_ID_CANNOT_BE_NULL(202, 422),
    TAG_ID_CANNOT_BE_NEGATIVE(203, 422),
    TAG_NAME_CANNOT_BE_NULL(204, 422),
    TAG_NAME_TOO_SHORT(205, 422),
    TAG_NAME_TOO_LONG(206, 422),
    TAG_NAME_STARTS_WITH_WHITESPACE(207, 422),
    TAG_NAME_ENDS_WITH_WHITESPACE(208, 422),
    TAG_NAME_MUST_BE_UNIQUE(209, 422),
    THERE_IS_NO_TAG_WITH_PROVIDED_NAME(210, 404);

    private final Integer exceptionCode;
    private final Integer httpStatus;

    ExceptionCode(Integer exceptionCode, Integer httpStatus){
        this.exceptionCode = exceptionCode;
        this.httpStatus = httpStatus;
    }

    public Integer getExceptionCode(){
        return exceptionCode;
    }

    public Integer getHttpStatus(){
        return httpStatus; }

    public static ExceptionCode getByExceptionCode(Integer id){
        return Arrays.stream(ExceptionCode.values())
                .filter(exceptionCode -> Objects.equals(exceptionCode.getExceptionCode(), id))
                .findFirst()
                .orElse(UNKNOWN_EXCEPTION);
    }
}
